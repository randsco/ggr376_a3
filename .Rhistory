prediction_grid <- makegrid(state_boundaries, cellsize = 0.5)
class(prediction_grid)
str(prediction_grid)
coordinates(prediction_grid) <- ~ x1+x2
class(prediction_grid)
# Add grid to plot
plot(prediction_grid, add = TRUE)
# Convert grid to SPDF
spatial_grid <- SpatialPoints(prediction_grid, proj4string = CRS(proj4string(no2)))
spatial_grid_clipped <- spatial_grid[state_boundaries, ]
proj4string(spatial_grid)
proj4string(no2)
proj4string(state_boundaries)
# Plot sensors
plot(no2, col = "BLUE")
plot(o3, add = TRUE, col = "GREEN")
plot(pm25, add = TRUE, col = "RED")
# Generate grid based on bounding box of state_boundaries
prediction_grid <- makegrid(state_boundaries, cellsize = 0.5)
class(prediction_grid)
str(prediction_grid)
coordinates(prediction_grid) <- ~ x1+x2
class(prediction_grid)
# Add grid to plot
plot(prediction_grid, add = TRUE)
# Convert grid to SPDF
spatial_grid <- SpatialPoints(prediction_grid, proj4string = CRS(proj4string(no2)))
spatial_grid_clipped <- spatial_grid[state_boundaries, ]
# Plot sensors
plot(no2, col = "BLUE")
plot(o3, add = TRUE, col = "GREEN")
plot(pm25, add = TRUE, col = "RED")
# Generate grid based on bounding box of state_boundaries
prediction_grid <- makegrid(state_boundaries, cellsize = 0.5)
class(prediction_grid)
str(prediction_grid)
coordinates(prediction_grid) <- ~ x1+x2
class(prediction_grid)
# Add grid to plot
plot(prediction_grid, add = TRUE)
# Convert grid to SPDF
spatial_grid <- SpatialPoints(prediction_grid, proj4string = CRS(proj4string(state_boundaries)))
spatial_grid_clipped <- spatial_grid[state_boundaries, ]
# Plot sensors
plot(no2, col = "BLUE")
plot(o3, add = TRUE, col = "GREEN")
plot(pm25, add = TRUE, col = "RED")
# Generate grid based on bounding box of state_boundaries
prediction_grid <- makegrid(state_boundaries, cellsize = 0.5)
class(prediction_grid)
str(prediction_grid)
coordinates(prediction_grid) <- ~ x1+x2
class(prediction_grid)
# Add grid to plot
plot(prediction_grid, add = TRUE)
# Convert grid to SPDF
spatial_grid <- SpatialPoints(prediction_grid, proj4string = CRS(proj4string(state_boundaries)))
spatial_grid_clipped <- spatial_grid[state_boundaries, ]
# Plot sensors
plot(no2, col = "BLUE")
plot(o3, add = TRUE, col = "GREEN")
plot(pm25, add = TRUE, col = "RED")
# Generate grid based on bounding box of state_boundaries
prediction_grid <- makegrid(state_boundaries, cellsize = 0.5)
class(prediction_grid)
str(prediction_grid)
coordinates(prediction_grid) <- ~ x1+x2
class(prediction_grid)
# Add grid to plot
plot(prediction_grid, add = TRUE)
# Convert grid to SPDF
spatial_grid <- SpatialPoints(prediction_grid, proj4string = CRS(proj4string(state_boundaries)))
spatial_grid_clipped <- spatial_grid[state_boundaries, ]
# Plot spatial grid
plot(spatial_grid_clipped)
# Plot sensors
plot(no2, col = "BLUE")
plot(o3, add = TRUE, col = "GREEN")
plot(pm25, add = TRUE, col = "RED")
# Generate grid based on bounding box of state_boundaries
prediction_grid <- makegrid(state_boundaries, cellsize = 0.5)
class(prediction_grid)
str(prediction_grid)
coordinates(prediction_grid) <- ~ x1+x2
class(prediction_grid)
# Add grid to plot
plot(prediction_grid, add = TRUE)
# Convert grid to SPDF
spatial_grid <- SpatialPoints(prediction_grid, proj4string = CRS(proj4string(state_boundaries)))
spatial_grid_clipped <- spatial_grid[state_boundaries, ]
# Plot spatial grid with sensors
plot(spatial_grid_clipped)
plot(no2, col = "BLUE")
plot(o3, add = TRUE, col = "GREEN")
plot(pm25, add = TRUE, col = "RED")
# Plot sensors
plot(no2, col = "BLUE")
plot(o3, add = TRUE, col = "GREEN")
plot(pm25, add = TRUE, col = "RED")
# Generate grid based on bounding box of state_boundaries
prediction_grid <- makegrid(state_boundaries, cellsize = 0.5)
class(prediction_grid)
str(prediction_grid)
coordinates(prediction_grid) <- ~ x1+x2
class(prediction_grid)
# Add grid to plot
plot(prediction_grid, add = TRUE)
# Convert grid to SPDF
spatial_grid <- SpatialPoints(prediction_grid, proj4string = CRS(proj4string(state_boundaries)))
spatial_grid_clipped <- spatial_grid[state_boundaries, ]
# Plot spatial grid with sensors
plot(spatial_grid_clipped)
plot(no2, add = TRUE, col = "BLUE")
plot(o3, add = TRUE, col = "GREEN")
plot(pm25, add = TRUE, col = "RED")
idw_pred <- idw(no2@data$`Arithmetic Mean` ~ 1, # Formula for IDW and Ordinary Kriging are Value ~ 1
no2, # Input Data
spatial_grid_clipped, # Prediction Locations
idp = 2 # Exponent (k)
)
class(idw_pred)
str(idw_pred)
spplot(idw_pred, "var1.pred")
idw_pred <- idw(no2@data$`Arithmetic Mean` ~ 7, # Formula for IDW and Ordinary Kriging are Value ~ 1
no2, # Input Data
spatial_grid_clipped, # Prediction Locations
idp = 2 # Exponent (k)
)
idw_pred <- idw(no2@data$`Arithmetic Mean` ~ 1, # Formula for IDW and Ordinary Kriging are Value ~ 1
no2, # Input Data
spatial_grid_clipped, # Prediction Locations
idp = 7 # Exponent (k)
)
class(idw_pred)
str(idw_pred)
spplot(idw_pred, "var1.pred")
idw_pred <- idw(no2@data$`Arithmetic Mean` ~ 1, # Formula for IDW and Ordinary Kriging are Value ~ 1
no2, # Input Data
spatial_grid_clipped, # Prediction Locations
idp = 2 # Exponent (k)
)
class(idw_pred)
str(idw_pred)
spplot(idw_pred, "var1.pred")
idw_pred <- idw(no2@data$`Arithmetic Mean` ~ 1, # Formula for IDW and Ordinary Kriging are Value ~ 1
no2, # Input Data
spatial_grid_clipped, # Prediction Locations
idp = 2 # Exponent (k)
)
class(idw_pred)
str(idw_pred)
spplot(idw_pred, "var1.pred")
# Plot sensors
plot(no2, col = "BLUE")
plot(o3, add = TRUE, col = "GREEN")
plot(pm25, add = TRUE, col = "RED")
# Generate grid based on bounding box of state_boundaries
prediction_grid <- makegrid(state_boundaries, cellsize = 0.5)
class(prediction_grid)
str(prediction_grid)
coordinates(prediction_grid) <- ~ x1+x2
class(prediction_grid)
# Add grid to plot
plot(prediction_grid, add = TRUE)
# Convert grid to SPDF
spatial_grid <- SpatialPoints(prediction_grid, proj4string = CRS(proj4string(state_boundaries)))
spatial_grid_clipped <- spatial_grid[state_boundaries, ]
# Plot spatial grid with sensors
plot(spatial_grid_clipped)
plot(no2, add = TRUE, col = "BLUE")
plot(o3, add = TRUE, col = "GREEN")
plot(pm25, add = TRUE, col = "RED")
idw_pred <- idw(no2@data$`Arithmetic Mean` ~ 1, # Formula for IDW and Ordinary Kriging are Value ~ 1
no2, # Input Data
spatial_grid_clipped, # Prediction Locations
idp = 2 # Exponent (k)
)
class(idw_pred)
str(idw_pred)
spplot(idw_pred, "var1.pred")
# NO2 data preview
data(no2)
glimpse(no2)
class(no2)
# NO2 convert to SPDF
coordinates(no2) <- ~ Longitude + Latitude
# NO2 pre transform
class(no2)
bbox(no2)
hist(no2@data$'Arithmetic Mean')
# Log transform NO2 data to meet normally distributed assumption for kriging
no2@data$'AMLog' <- log(no2@data$'Arithmetic Mean')
# Histogram of new variable
hist(no2@data$'AMLog')
# Show variogram models
show.vgms()
# NO2 variogram
no2_var.vgm <- variogram(AMLog~1, no2)
plot(no2_var.vgm)
# O3 pre transform
class(o3)
bbox(o3)
hist(o3@data$'Arithmetic Mean')
# Log transform O3 data to meet normally distributed assumption for kriging
o3@data$'AMLog' <- log(o3@data$'Arithmetic Mean')
# Histogram of new variable
hist(o3@data$'AMLog')
# Show variogram models
show.vgms()
# O3 variogram
o3_var.vgm <- variogram(AMLog~1, o3)
plot(o3_var.vgm)
# PM 2.5 pre transform
class(pm25)
bbox(pm25)
hist(pm25@data$'Arithmetic Mean')
# Log transform PM 2.5 data to meet normally distributed assumption for kriging
pm25@data$'AMLog' <- log(pm25@data$'Arithmetic Mean')
# Histogram of new variable
hist(pm25@data$'AMLog')
# Show variogram models
show.vgms()
# PM 2.5 variogram
pm25_var.vgm <- variogram(AMLog~1, pm25)
plot(pm25_var.vgm)
pm25.fit <- fit.variogram(pm25_var.vgm, model = vgm("Sph"))
plot(pm25_var.vgm, pm25)
pm25.fit <- fit.variogram(pm25_var.vgm, model = vgm(1, "Log", 1))
plot(pm25_var.vgm, pm25)
lead.vgm <- variogram(logLead~1, meuse)
plot(lead.vgm)
# Add logLead variable
meuse@data$logLead <- log(meuse@data$lead)
# Histogram of new variable
hist(meuse@data$logLead)
hist(meuse@data$lead)
show.vgms()
lead.fit <- fit.variogram(lead.vgm, model = vgm("Sph"))
plot(lead.vgm, lead.fit)
pm25.fit <- fit.variogram(pm25.vgm, model = vgm(1, "Log", 1))
pm25.fit <- fit.variogram(pm25.vgm, model = vgm(1, "Log", 1))
pm25.fit <- fit.variogram(pm25_var.vgm, model = vgm(1, "Log", 1))
plot(pm25_var.vgm, pm25)
pm25.fit <- fit.variogram(pm25_var.vgm, model = vgm(1, "Log", 1))
plot(pm25_var.vgm, pm25.fit)
pm25.fit <- fit.variogram(pm25_var.vgm, model = vgm("Log"))
plot(pm25_var.vgm, pm25.fit)
pm25.fit <- fit.variogram(pm25_var.vgm, model = vgm(1, "Log", 1))
plot(pm25_var.vgm, pm25.fit)
pm25.fit <- fit.variogram(pm25_var.vgm, model = vgm(2, "Log", 1))
plot(pm25_var.vgm, pm25.fit)
pm25.fit <- fit.variogram(pm25_var.vgm, model = vgm(1, "Log", 1))
plot(pm25_var.vgm, pm25.fit)
pm25.fit <- fit.variogram(pm25_var.vgm, model = vgm(1, "Log", 2))
plot(pm25_var.vgm, pm25.fit)
pm25.fit <- fit.variogram(pm25_var.vgm, model = vgm(1, "Log", 1))
plot(pm25_var.vgm, pm25.fit)
pm25.fit <- fit.variogram(pm25_var.vgm, model = vgm(1, "Log", 1))
plot(pm25_var.vgm, pm25.fit)
View(LOOCV)
lead.fit
# Get a matrix of the coordinates
crds <- coordinates(convex_hull_points)
# Create a polygon
poly <- sp::Polygon(crds)
# Prepare data for a SpatialPolygons Object
ID <- "Minimum Boundary"
Pls <- Polygons(list(poly), ID=ID)
SPls <- SpatialPolygons(list(Pls))
plot(SPls)
class(SPls)
grid <- makegrid(SPls, cellsize = 100)
class(grid)
str(grid)
coordinates(grid) <- ~ x1+x2
class(grid)
plot(grid)
# Check which grid cells are in the polygon
grid_in_poly <- sp::over(grid , SPls)
grid_in_poly # NA were not in poly
# Select points not NA using !is.na()
grid_predict <- grid[!is.na(grid_in_poly),]
plot(grid_predict)
pm25.fit <- fit.variogram(pm25_var.vgm, model = vgm(1, "Log", 1))
plot(pm25_var.vgm, pm25.fit)
pm25_ordinary_krige <- krige(AMLog~1, pm25, spatial_grid_clipped, model=pm25.fit)
lead_ordinary_krige <- krige(logLead~1, meuse, grid_predict, model=lead.fit)
spplot(lead_ordinary_krige, "var1.pred")
pm25_ordinary_krige <- krige(AMLog~1, pm25, spatial_grid_clipped, model=pm25.fit)
spplot(pm25_ordinary_krige, "var1.pred")
pm25_ordinary_krige <- krige(AMLog~1, pm25, spatial_grid_clipped, model=pm25.fit)
pm25_ordinary_krige <- krige(pm25@data$AMLog~1, pm25, spatial_grid_clipped, model=pm25.fit)
spplot(pm25_ordinary_krige, "var1.pred")
View(pm25_ordinary_krige)
View(lead_ordinary_krige)
pm25_ordinary_krige <- krige(pm25@data$AMLog~1, pm25, spatial_grid_clipped, model=pm25.fit)
spplot(pm25_ordinary_krige, "var1.pred")
# Plot sensors
plot(no2, col = "BLUE")
plot(o3, add = TRUE, col = "GREEN")
plot(pm25, add = TRUE, col = "RED")
# Generate grid based on bounding box of state_boundaries
prediction_grid <- makegrid(state_boundaries, cellsize = 0.5)
class(prediction_grid)
str(prediction_grid)
coordinates(prediction_grid) <- ~ x1+x2
class(prediction_grid)
# Add grid to plot
plot(prediction_grid, add = TRUE)
# Convert grid to SPDF
spatial_grid <- SpatialPoints(prediction_grid, proj4string = CRS(proj4string(state_boundaries)))
spatial_grid_clipped <- spatial_grid[!is.na(state_boundaries), ]
# Plot spatial grid with sensors
plot(spatial_grid_clipped)
plot(no2, add = TRUE, col = "BLUE")
plot(o3, add = TRUE, col = "GREEN")
plot(pm25, add = TRUE, col = "RED")
# Plot sensors
plot(no2, col = "BLUE")
plot(o3, add = TRUE, col = "GREEN")
plot(pm25, add = TRUE, col = "RED")
# Generate grid based on bounding box of state_boundaries
prediction_grid <- makegrid(state_boundaries, cellsize = 0.5)
class(prediction_grid)
str(prediction_grid)
coordinates(prediction_grid) <- ~ x1+x2
class(prediction_grid)
# Add grid to plot
plot(prediction_grid, add = TRUE)
# Convert grid to SPDF
spatial_grid <- SpatialPoints(prediction_grid, proj4string = CRS(proj4string(state_boundaries)))
spatial_grid_clipped <- spatial_grid[is.na(state_boundaries), ]
# Plot spatial grid with sensors
plot(spatial_grid_clipped)
plot(no2, add = TRUE, col = "BLUE")
plot(o3, add = TRUE, col = "GREEN")
plot(pm25, add = TRUE, col = "RED")
# Plot sensors
plot(no2, col = "BLUE")
plot(o3, add = TRUE, col = "GREEN")
plot(pm25, add = TRUE, col = "RED")
# Generate grid based on bounding box of state_boundaries
prediction_grid <- makegrid(state_boundaries, cellsize = 0.5)
class(prediction_grid)
str(prediction_grid)
coordinates(prediction_grid) <- ~ x1+x2
class(prediction_grid)
# Add grid to plot
plot(prediction_grid, add = TRUE)
# Convert grid to SPDF
spatial_grid <- SpatialPoints(prediction_grid, proj4string = CRS(proj4string(state_boundaries)))
spatial_grid_clipped <- spatial_grid[state_boundaries, ]
# Plot spatial grid with sensors
plot(spatial_grid_clipped)
plot(no2, add = TRUE, col = "BLUE")
plot(o3, add = TRUE, col = "GREEN")
plot(pm25, add = TRUE, col = "RED")
pm25_ordinary_krige <- krige(pm25@data$AMLog~1, pm25, spatial_grid_clipped, model=pm25.fit)
pm25_fixed <- pm25[-zerodist(pm25)[,1],]
pm25_ordinary_krige <- krige(pm25@data$AMLog~1, pm25_fixed, spatial_grid_clipped, model=pm25.fit)
pm25_fixed <- pm25[-zerodist(pm25)[,1],]
pm25_ordinary_krige <- krige(pm25@data$AMLog~1, pm25_fixed[!is.na(pm25_fixed$AMLog),], spatial_grid_clipped, model=pm25.fit)
pm25_fixed <- pm25[-zerodist(pm25)[,1],]
pm25_fixed2 <- pm25_fixed[!is.na(pm25_fixed$AMLog),]
pm25_ordinary_krige <- krige(pm25@data$AMLog~1, pm25_fixed, spatial_grid_clipped, model=pm25.fit)
View(pm25_fixed)
View(pm25_fixed2)
pm25_fixed <- pm25[-zerodist(pm25)[,1],]
pm25_fixed2 <- pm25_fixed[!is.na(pm25_fixed$AMLog),]
pm25_ordinary_krige <- krige(pm25_fixed@data$AMLog~1, pm25_fixed, spatial_grid_clipped, model=pm25.fit)
spplot(pm25_ordinary_krige, "var1.pred")
pm25_fixed <- pm25[-zerodist(pm25)[,1],]
pm25_fixed2 <- pm25_fixed[!is.na(pm25_fixed$AMLog),]
pm25_ordinary_krige <- krige(pm25_fixed2@data$AMLog~1, pm25_fixed2, spatial_grid_clipped, model=pm25.fit)
pm25_fixed <- pm25[-zerodist(pm25)[,1],]
pm25_ordinary_krige <- krige(pm25_fixed2@data$AMLog~1, pm25_fixed[!is.na(pm25_fixed$AMLog),], spatial_grid_clipped, model=pm25.fit)
pm25_fixed <- pm25[-zerodist(pm25)[,1],]
pm25_ordinary_krige <- krige(pm25_fixed@data$AMLog~1, pm25_fixed[!is.na(pm25_fixed$AMLog),], spatial_grid_clipped, model=pm25.fit)
pm25_fixed <- pm25[-zerodist(pm25)[,1],]
pm25_ordinary_krige <- krige(pm25_fixed@data$AMLog~1, pm25_fixed[!is.na(pm25_fixed$AMLog),], newdata=spatial_grid_clipped, model=pm25.fit)
spplot(pm25_ordinary_krige, "var1.pred")
pm25_fixed <- pm25[-zerodist(pm25)[,1],]
pm25_ordinary_krige <- krige(pm25@data$AMLog~1, pm25_fixed, spatial_grid_clipped, model=pm25.fit)
spplot(lead_ordinary_krige, "var1.var")
str(lead_ordinary_krige)
LOOCV_krige_lead <-krige.cv(logLead~1, meuse, model=lead.fit )
LOOCV_krige_lead@data$residual
# Note, this is in log units for lead
RMSE_resid(LOOCV_krige_lead@data$residual)
pm25_fixed <- pm25[-zerodist(pm25)[,1],]
pm25_ordinary_krige <- krige(pm25@data$AMLog~1, pm25_fixed, spatial_grid_clipped, model=pm25.fit)
pm25_fixed <- pm25[-zerodist(pm25)[,1],]
pm25_ordinary_krige <- krige(pm25@data$AMLog~1, pm25_fixed, spatial_grid_clipped, model=pm25.fit)
pm25_fixed <- pm25[-zerodist(pm25)[,1],]
pm25_ordinary_krige <- krige(pm25@data$AMLog~1, pm25_fixed, spatial_grid_clipped, model=pm25.fit)
pm25_fixed <- pm25[-zerodist(pm25)[,1],]
pm25_ordinary_krige <- krige(pm25@data$AMLog~1, pm25_fixed, spatial_grid_clipped, model=pm25.fit)
class(meuse.grid)
pm25_fixed <- pm25[-zerodist(pm25)[,1],]
pm25_ordinary_krige <- krige(pm25@data$AMLog~1, pm25_fixed, spatial_grid_clipped, model=pm25.fit)
pm25_fixed <- pm25[-zerodist(pm25)[,1],]
pm25_ordinary_krige <- krige(pm25@data$AMLog~1, pm25_fixed, spatial_grid_clipped, model=pm25.fit)
spplot(pm25_ordinary_krige, "var1.pred")
pm25_fixed <- pm25[-zerodist(pm25)[,1],]
pm25_ordinary_krige <- krige(AMLog~1, pm25_fixed, spatial_grid_clipped, model=pm25.fit)
spplot(pm25_ordinary_krige, "var1.pred")
idw_pred <- idw(no2@data$`AMLog` ~ 1, # Formula for IDW and Ordinary Kriging are Value ~ 1
no2, # Input Data
spatial_grid_clipped, # Prediction Locations
idp = 2 # Exponent (k)
)
class(idw_pred)
str(idw_pred)
spplot(idw_pred, "var1.pred")
idw_pred <- idw(no2@data$`AMLog` ~ 1, # Formula for IDW and Ordinary Kriging are Value ~ 1
no2, # Input Data
spatial_grid_clipped, # Prediction Locations
idp = 3 # Exponent (k)
)
class(idw_pred)
str(idw_pred)
spplot(idw_pred, "var1.pred")
idw_pred <- idw(no2@data$`AMLog` ~ 1, # Formula for IDW and Ordinary Kriging are Value ~ 1
no2, # Input Data
spatial_grid_clipped, # Prediction Locations
idp = 4 # Exponent (k)
)
class(idw_pred)
str(idw_pred)
spplot(idw_pred, "var1.pred")
idw_pred <- idw(no2@data$`AMLog` ~ 1, # Formula for IDW and Ordinary Kriging are Value ~ 1
no2, # Input Data
spatial_grid_clipped, # Prediction Locations
idp = 2 # Exponent (k)
)
class(idw_pred)
str(idw_pred)
spplot(idw_pred, "var1.pred")
idw_pred <- idw(no2@data$AMLog ~ 1, # Formula for IDW and Ordinary Kriging are Value ~ 1
no2, # Input Data
spatial_grid_clipped, # Prediction Locations
idp = 2 # Exponent (k)
)
class(idw_pred)
str(idw_pred)
spplot(idw_pred, "var1.pred")
idw_pred <- idw(AMLog ~ 1, # Formula for IDW and Ordinary Kriging are Value ~ 1
no2, # Input Data
spatial_grid_clipped, # Prediction Locations
idp = 2 # Exponent (k)
)
class(idw_pred)
str(idw_pred)
spplot(idw_pred, "var1.pred")
idw_pred <- idw(no2@data$AMLog ~ 1, # Formula for IDW and Ordinary Kriging are Value ~ 1
no2, # Input Data
spatial_grid_clipped, # Prediction Locations
idp = 2 # Exponent (k)
)
class(idw_pred)
str(idw_pred)
spplot(idw_pred, "var1.pred")
idw_pred <- idw(pm25@data$AMLog ~ 1, # Formula for IDW and Ordinary Kriging are Value ~ 1
pm25, # Input Data
spatial_grid_clipped, # Prediction Locations
idp = 2 # Exponent (k)
)
class(idw_pred)
str(idw_pred)
spplot(idw_pred, "var1.pred")
idw_pred <- idw(no2@data$AMLog ~ 1, # Formula for IDW and Ordinary Kriging are Value ~ 1
no2, # Input Data
spatial_grid_clipped, # Prediction Locations
idp = 2 # Exponent (k)
)
class(idw_pred)
str(idw_pred)
spplot(idw_pred, "var1.pred")
pm25.fit <- fit.variogram(pm25_var.vgm, model = vgm(1, "Log", 1))
plot(pm25_var.vgm, pm25.fit)
pm25_fixed <- pm25[-zerodist(pm25)[,1],]
pm25_ordinary_krige <- krige(pm25@data$AMLog~1, pm25_fixed, spatial_grid_clipped, model=pm25.fit)
pm25_fixed <- pm25[-zerodist(pm25)[,1],]
pm25_ordinary_krige <- krige(pm25_fixed@data$AMLog~1, pm25_fixed, spatial_grid_clipped, model=pm25.fit)
pm25_fixed <- pm25[-zerodist(pm25)[,1],]
pm25_ordinary_krige <- krige(AMLog~1, pm25_fixed, spatial_grid_clipped, model=pm25.fit)
View(meuse)
View(no2)
spplot(pm25_ordinary_krige, "var1.pred")
View(lead_ordinary_krige)
View(pm25)
View(spatial_grid_clipped)
pm25_fixed <- pm25[-zerodist(pm25)[,1],]
pm25_ordinary_krige <- krige(pm25@data$AMLog~1, pm25_fixed, spatial_grid_clipped, model=pm25.fit)
pm25_fixed <- pm25[-zerodist(pm25)[,1],]
pm25_ordinary_krige <- krige(pm25@data$AMLog~1, pm25, spatial_grid_clipped, model=pm25.fit)
pm25_fixed <- pm25[-zerodist(pm25)[,1],]
pm25_ordinary_krige <- krige(pm25_fixed@data$AMLog~1, pm25_fixed, spatial_grid_clipped, model=pm25.fit)
spplot(pm25_ordinary_krige, "var1.pred")
View(pm25_ordinary_krige)
pm25_fixed <- pm25[-zerodist(pm25)[,1],]
pm25_ordinary_krige <- krige(pm25_fixed@data$AMLog~1, pm25_fixed, spatial_grid_clipped, model=pm25.fit)
spplot(pm25_ordinary_krige, "var1.pred")
View(pm25_ordinary_krige)
zerodist(pm25)
zerodist(spatial_grid_clipped)
zerodist(no2)
zerodist(o3)
zerodist(pm25_fixed)
View(no2)
View(meuse)
View(no2)
